{"version":3,"sources":["webpack://Dastal/webpack/universalModuleDefinition","webpack://Dastal/./src/list/arrayList.ts","webpack://Dastal/./src/list/doublyLinkedList.ts","webpack://Dastal/./src/list/linkedList.ts","webpack://Dastal/./src/queue/arrayQueue.ts","webpack://Dastal/./src/queue/linkedQueue.ts","webpack://Dastal/./src/stack/arrayStack.ts","webpack://Dastal/./src/stack/linkedStack.ts","webpack://Dastal/webpack/bootstrap","webpack://Dastal/webpack/runtime/compat get default export","webpack://Dastal/webpack/runtime/define property getters","webpack://Dastal/webpack/runtime/hasOwnProperty shorthand","webpack://Dastal/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","self","Symbol","iterator","ArrayList","elements","this","array","Array","from","index","element","length","splice","size","callback","value","pop","push","prev","shift","unshift","DoublyLinkedList","next","_get","node","undefined","tail","head","i","LinkedList","remove","ArrayQueue","LinkedQueue","list","clear","get","ArrayStack","LinkedStack","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","r","toStringTag"],"mappings":"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","file":"dastal.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Dastal\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Dastal\"] = factory();\n\telse\n\t\troot[\"Dastal\"] = factory();\n})(self, function() {\nreturn ","import { List } from './list';\n\n/**\n * An implementation of the {@link List} interface using an array\n */\nexport class ArrayList<T> implements List<T> {\n    /**\n     * @ignore\n     */\n    protected array: Array<T>;\n\n    constructor(elements?: Iterable<T>) {\n        this.array = elements ? Array.from(elements) : [];\n    }\n    /**\n     * Add the element at the specified index\n     *\n     * @param index - The index to add into\n     * @param element - The element to add\n     *\n     * @returns The new size of the list\n     */\n    add(index: number, element: T): number {\n        if (index >= 0 && index <= this.array.length) {\n            this.array.splice(index, 0, element);\n        }\n        return this.size;\n    }\n    /**\n     * Removes all elements\n     */\n    clear(): void {\n        this.array.length = 0;\n    }\n    /**\n     * Return the element at the specified index\n     *\n     * @param index - The index to retrieve\n     *\n     * @returns The element at the index, or `undefined` if index is invalid\n     */\n    get(index: number): T | undefined {\n        if (index < 0 || index >= this.array.length) {\n            return undefined;\n        }\n        return this.array[index];\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param callback - A function that receives the previous element and returns the new element.\n     * Note: The function is only called if the index is valid\n     *\n     * @returns The previous element at the index, or `undefined` if index is invalid\n     */\n    getSet(index: number, callback: (element: T) => T): T | undefined {\n        if (index < 0 || index >= this.array.length) {\n            return undefined;\n        }\n        const value = this.array[index];\n        this.array[index] = callback(value);\n        return value;\n    }\n    /**\n     * Retrieves and removes the end of the list\n     *\n     * @returns The element at the end of the list, or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        return this.array.pop();\n    }\n    /**\n     * Inserts the specified element into the end of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns The new size of the list\n     */\n    push(element: T): number {\n        return this.array.push(element);\n    }\n    /**\n     * Retrieves and removes the element at the given index\n     *\n     * @param index - The index to remove\n     *\n     * @returns The element at the index or `undefined` if the index is invalid\n     */\n    remove(index: number): T | undefined {\n        if (index < 0 || index >= this.array.length) {\n            return undefined;\n        }\n        return this.array.splice(index, 1)[0];\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param element - The new element to insert at index\n     *\n     * @returns The previous element in the index, or undefined if the index is invalid\n     */\n    set(index: number, element: T): T | undefined {\n        if (index < 0 || index >= this.array.length) {\n            return undefined;\n        }\n        const prev = this.array[index];\n        this.array[index] = element;\n        return prev;\n    }\n    /**\n     * Retrieves and removes the first element in the list\n     *\n     * @returns The element at the front of the list or `undefined` if this list is empty.\n     */\n    shift(): T | undefined {\n        return this.array.shift();\n    }\n    /**\n     * The number of elements in this list\n     */\n    get size(): number {\n        return this.array.length;\n    }\n    /**\n     * Receive an iterator through the list.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the list\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this.array[Symbol.iterator]();\n    }\n    /**\n     * Inserts the specified element into the front of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns The new size of the list\n     */\n    unshift(element: T): number {\n        return this.array.unshift(element);\n    }\n}\n","import { List } from './list';\n\n/**\n * A doubly-linked node version of the {@link LinkedNode} interface.\n *\n * Each node links to its neighbors on the left (prev) and right (next) of it.\n */\nexport interface DoublyLinkedNode<T> {\n    /**\n     * A link to the node's next (right) neighbor\n     */\n    next?: DoublyLinkedNode<T>;\n    /**\n     * A link to the node's previous (left) neighbor\n     */\n    prev?: DoublyLinkedNode<T>;\n    /**\n     * The value of the node\n     */\n    value: T;\n}\n/**\n * A (circular) doubly-linked list implementation of the {@link List} interface.\n *\n * Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index.\n */\nexport class DoublyLinkedList<T> implements List<T> {\n    /**\n     * @ignore\n     * The number of elements in this list\n     */\n    protected length: number;\n    /**\n     * @ignore\n     * The first node in the list\n     */\n    protected root: DoublyLinkedNode<T>;\n\n    constructor(elements?: Iterable<T>) {\n        this.length = 0;\n        this.root = {} as DoublyLinkedNode<T>;\n        this.root.prev = this.root.next = this.root;\n        for (const element of elements || []) {\n            this.push(element);\n        }\n    }\n    /**\n     * Add the element at the specified index\n     *\n     * @param index - The index to add into\n     * @param value - The element to add\n     */\n    add(index: number, value: T): number {\n        if (index < 0 || index > this.length) {\n            return this.length;\n        }\n        const prev = this._get(index - 1);\n        const node = { next: prev.next, prev, value };\n        prev.next = node.next!.prev = node;\n        return ++this.length;\n    }\n    /**\n     * Removes all elements\n     */\n    clear(): void {\n        this.length = 0;\n        this.root.prev = this.root.next = this.root;\n    }\n    /**\n     * Return the element at the specified index\n     *\n     * @param index - The index to retrieve\n     *\n     * @returns The element at the index, or `undefined` if index is invalid\n     */\n    get(index: number): T | undefined {\n        return index < 0 || index >= this.length ? undefined : this._get(index).value;\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param callback - A function that receives the previous element and returns the new element\n     * Note: The function is only called if the index is valid\n     *\n     * @returns The previous element at the index, or `undefined` if index is invalid\n     */\n    getSet(index: number, callback: (element: T) => T): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        const value = node.value;\n        node.value = callback(node.value);\n        return value;\n    }\n    /**\n     * Retrieves and removes the end of the list\n     *\n     * @returns The element at the end of the list, or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        if (this.length < 1) {\n            return undefined;\n        }\n        const tail = this.root.prev!;\n        tail.prev!.next = this.root;\n        this.root.prev = tail.prev;\n        --this.length;\n        return tail.value;\n    }\n    /**\n     * Inserts the specified element into the end of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    push(value: T): number {\n        const tail = this.root.prev!;\n        const node = { next: this.root, prev: tail, value };\n        tail.next = this.root.prev = node;\n        return ++this.length;\n    }\n    /**\n     * Retrieves and removes the element at the given index\n     *\n     * @param index - The index to remove\n     *\n     * @returns The element at the index or `undefined` if the index is invalid\n     */\n    remove(index: number): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        node.prev!.next = node.next;\n        node.next!.prev = node.prev;\n        --this.length;\n        return node.value;\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param element - The new element to insert at index\n     *\n     * @returns The previous element in the index, or undefined if the index is invalid\n     */\n    set(index: number, element: T): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        const prev = node.value;\n        node.value = element;\n        return prev;\n    }\n    /**\n     * Retrieves and removes the first element in the list\n     *\n     * @returns The element at the front of the list or `undefined` if this list is empty.\n     */\n    shift(): T | undefined {\n        if (this.length < 1) {\n            return undefined;\n        }\n        const head = this.root.next!;\n        head.next!.prev = this.root;\n        this.root.next = head.next;\n        --this.length;\n        return head.value;\n    }\n    /**\n     * The number of elements in this list\n     */\n    get size(): number {\n        return this.length;\n    }\n    /**\n     * Receive an iterator through the list.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the list\n     */\n    *[Symbol.iterator](): Iterator<T> {\n        let node = this.root;\n        for (let i = 0; i < this.length; ++i) {\n            node = node.next!;\n            yield node.value;\n        }\n    }\n    /**\n     * Inserts the specified element into the front of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    unshift(value: T): number {\n        const head = this.root.next!;\n        const node = { next: head, prev: this.root, value };\n        this.root.next = head.prev = node;\n        return ++this.length;\n    }\n    /**\n     * @ignore\n     * A helper method to iterate and return the node at the given index.\n     *\n     * Depending on the index, the list will be traversed from beginning or end; whichever is closest to the specified index.\n     *\n     * @param index - The index to retrieve\n     *\n     * @returns The node at the given index\n     */\n    protected _get(index: number): DoublyLinkedNode<T> {\n        let node = this.root;\n\n        if (index < this.length / 2) {\n            while (index-- >= 0) {\n                node = node.next!;\n            }\n        } else {\n            for (index = this.length - index; index > 0; --index) {\n                node = node.prev!;\n            }\n        }\n\n        return node;\n    }\n}\n","import { List } from './list';\n\n/**\n * A linked node interface.\n *\n * Each node links to its next neighbor.\n */\nexport interface LinkedNode<T> {\n    /**\n     * A link to the node's neighbor\n     */\n    next?: LinkedNode<T>;\n    /**\n     * The value of the node\n     */\n    value: T;\n}\n/**\n * A (circular) linked list implementation of the {@link List} interface.\n */\nexport class LinkedList<T> implements List<T> {\n    /**\n     * @ignore\n     */\n    protected length: number;\n    /**\n     * @ignore\n     */\n    protected tail?: LinkedNode<T>;\n\n    constructor(elements?: Iterable<T>) {\n        this.length = 0;\n        for (const element of elements || []) {\n            this.push(element);\n        }\n    }\n    /**\n     * Add the element at the specified index\n     *\n     * @param index - The index to add into\n     * @param element - The element to add\n     */\n    add(index: number, value: T): number {\n        if (index < 0 || index >= this.length) {\n            return index == this.length ? this.push(value) : this.length;\n        }\n        const prev = this._get(index - 1);\n        prev.next = { value, next: prev.next };\n        return ++this.length;\n    }\n    /**\n     * Removes all elements\n     */\n    clear(): void {\n        this.length = 0;\n        this.tail = undefined;\n    }\n    /**\n     * Return the element at the specified index\n     *\n     * @param index - The index to retrieve\n     *\n     * @returns The element at the index, or `undefined` if index is invalid\n     */\n    get(index: number): T | undefined {\n        return index < 0 || index >= this.length ? undefined : this._get(index).value;\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param callback - A function that receives the previous element and returns the new element.\n     * Note: The function is only called if the index is valid\n     *\n     * @returns The previous element at the index, or `undefined` if index is invalid\n     */\n    getSet(index: number, callback: (element: T) => T): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        const value = node.value;\n        node.value = callback(node.value);\n        return value;\n    }\n    /**\n     * Retrieves and removes the end of the list\n     *\n     * @returns The value at the end of the list, or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        return this.remove(this.length - 1);\n    }\n    /**\n     * Inserts the specified value into the end of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    push(value: T): number {\n        this.unshift(value);\n        this.tail = this.tail!.next;\n        return this.length;\n    }\n    /**\n     * Retrieves and removes the element at the given index\n     *\n     * @param index - The index to remove\n     *\n     * @returns The value at the index or `undefined` if the index is invalid\n     */\n    remove(index: number): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const prev = this._get(index - 1);\n        const node = prev.next!;\n        prev.next = node.next;\n        if (--this.length < 1) {\n            this.tail = undefined;\n        }\n        return node.value;\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param element - The new element to insert at index\n     *\n     * @returns The previous element in the index, or undefined if the index is invalid\n     */\n    set(index: number, element: T): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        const value = node.value;\n        node.value = element;\n        return value;\n    }\n    /**\n     * Retrieves and removes the first element in the list\n     *\n     * @returns The value at the front of the list or `undefined` if this list is empty.\n     */\n    shift(): T | undefined {\n        if (this.tail == null) {\n            return undefined;\n        }\n        const head = this.tail.next!;\n        this.tail.next = head.next;\n        if (--this.length < 1) {\n            this.tail = undefined;\n        }\n        return head.value;\n    }\n    /**\n     * The number of elements in this list\n     */\n    get size(): number {\n        return this.length;\n    }\n    /**\n     * Receive an iterator through the list.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the list\n     */\n    *[Symbol.iterator](): Iterator<T> {\n        let node = this.tail;\n        for (let i = 0; i < this.length; ++i) {\n            node = node!.next!;\n            yield node.value;\n        }\n    }\n    /**\n     * Inserts the specified value into the front of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    unshift(value: T): number {\n        const head: LinkedNode<T> = { value } as LinkedNode<T>;\n        if (this.tail == null) {\n            head.next = head;\n            this.tail = head;\n        } else {\n            head.next = this.tail.next;\n            this.tail.next = head;\n        }\n        return ++this.length;\n    }\n    /**\n     * @ignore\n     * A helper method to iterate and return the node at the given index.\n     *\n     * @param index - The index to retrieve\n     *\n     * @returns The node at the given index\n     */\n    protected _get(index: number): LinkedNode<T> {\n        let node = this.tail!;\n        while (index-- >= 0) {\n            node = node.next!;\n        }\n        return node;\n    }\n}\n","import { Queue } from './queue';\n\n/**\n * An implementation of the {@link Queue} interface using an array\n */\nexport class ArrayQueue<T> implements Queue<T> {\n    /**\n     * @ignore\n     */\n    protected array: T[];\n\n    constructor(elements?: Iterable<T>) {\n        this.array = elements ? Array.from(elements) : [];\n    }\n    /**\n     * Removes all elements from this queue\n     */\n    clear(): void {\n        this.array.length = 0;\n    }\n    /**\n     * Retrieves and removes the head of this queue\n     *\n     * @returns The element at the head of the queue or `undefined` if this queue is empty.\n     */\n    dequeue(): T | undefined {\n        return this.size < 1 ? undefined : this.array.shift();\n    }\n    /**\n     * Inserts the specified element into this queue\n     *\n     * @param element - The element to be inserted\n     */\n    enqueue(element: T): number {\n        return this.array.push(element);\n    }\n    /**\n     * Retrieves, but does not remove, the head of this queue\n     *\n     * @returns The value at the head of the queue or `undefined` if this queue is empty.\n     */\n    peek(): T | undefined {\n        return this.size < 1 ? undefined : this.array[0];\n    }\n    /**\n     * The number of elements in this queue\n     */\n    get size(): number {\n        return this.array.length;\n    }\n    /**\n     * Receive an iterator through the queue.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the queue\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this.array[Symbol.iterator]();\n    }\n}\n","import { LinkedList, List } from '../list';\nimport { Queue } from './queue';\n\n/**\n * A linked list implementation of the {@link Queue} interface\n */\nexport class LinkedQueue<T> implements Queue<T> {\n    /**\n     * @ignore\n     */\n    protected list: List<T>;\n\n    constructor(elements?: Iterable<T>) {\n        this.list = new LinkedList(elements);\n    }\n    /**\n     * Removes all elements from this queue\n     */\n    clear(): void {\n        this.list.clear();\n    }\n    /**\n     * Retrieves and removes the head of this queue\n     *\n     * @returns The element at the head of the queue or `undefined` if this queue is empty.\n     */\n    dequeue(): T | undefined {\n        return this.list.shift();\n    }\n    /**\n     * Inserts the specified element into this queue\n     *\n     * @param element - The element to be inserted\n     */\n    enqueue(element: T): number {\n        return this.list.push(element);\n    }\n    /**\n     * Retrieves, but does not remove, the head of this queue\n     *\n     * @returns The element at the head of the queue or `undefined` if this queue is empty.\n     */\n    peek(): T | undefined {\n        return this.list.get(0);\n    }\n    /**\n     * The number of elements in this queue\n     */\n    get size(): number {\n        return this.list.size;\n    }\n    /**\n     * Receive an iterator through the queue.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the queue\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this.list[Symbol.iterator]();\n    }\n}\n","import { Stack } from './stack';\n\n/**\n * An implementation of the {@link Stack} interface using an array\n */\nexport class ArrayStack<T> implements Stack<T> {\n    /**\n     * @ignore\n     */\n    protected array: T[];\n\n    constructor(elements?: Iterable<T>) {\n        this.array = elements ? Array.from(elements) : [];\n    }\n    /**\n     * Removes all elements from the stack\n     */\n    clear(): void {\n        this.array.length = 0;\n    }\n    /**\n     * Retrieves, but does not remove, the top of the stack\n     *\n     * @returns The element at the top of the stack or `undefined` if empty.\n     */\n    peek(): T | undefined {\n        return this.array[this.array.length - 1];\n    }\n    /**\n     * Retrieves and removes the top of the stack\n     *\n     * @returns The element at the top of the stack or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        return this.array.pop();\n    }\n    /**\n     * Inserts a element into the stack\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns The new size of the stack\n     */\n    push(element: T): number {\n        return this.array.push(element);\n    }\n    /**\n     * The number of elements in the stack\n     */\n    get size(): number {\n        return this.array.length;\n    }\n    /**\n     * Receive an iterator through the stack.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the stack\n     */\n    *[Symbol.iterator](): Iterator<T> {\n        const array = this.array;\n        for (let i = array.length; i > 0; yield array[--i]) {}\n    }\n}\n","import { LinkedList, List } from '../list';\nimport { Stack } from './stack';\n\n/**\n * A linked list implementation of the {@link Stack} interface\n */\nexport class LinkedStack<T> implements Stack<T> {\n    /**\n     * @ignore\n     */\n    protected list: List<T>;\n\n    constructor(elements?: Iterable<T>) {\n        this.list = new LinkedList();\n        for (const element of elements || []) {\n            this.push(element);\n        }\n    }\n    /**\n     * Removes all elements from the stack\n     */\n    clear(): void {\n        this.list.clear();\n    }\n    /**\n     * Retrieves, but does not remove, the top of the stack\n     *\n     * @returns The element at the top of the stack or `undefined` if empty.\n     */\n    peek(): T | undefined {\n        return this.list.get(0);\n    }\n    /**\n     * Retrieves and removes the top of the stack\n     *\n     * @returns The element at the top of the stack or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        return this.list.shift();\n    }\n    /**\n     * Inserts a element into the stack\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns The new size of the stack\n     */\n    push(element: T): number {\n        return this.list.unshift(element);\n    }\n    /**\n     * The number of elements in the stack\n     */\n    get size(): number {\n        return this.list.size;\n    }\n    /**\n     * Receive an iterator through the stack.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the stack\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this.list[Symbol.iterator]();\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}