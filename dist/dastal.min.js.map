{"version":3,"sources":["webpack://Dastal/webpack/universalModuleDefinition","webpack://Dastal/./src/list/arrayList.ts","webpack://Dastal/./src/list/doublyLinkedList.ts","webpack://Dastal/./src/list/linkedList.ts","webpack://Dastal/webpack/bootstrap","webpack://Dastal/webpack/runtime/compat get default export","webpack://Dastal/webpack/runtime/define property getters","webpack://Dastal/webpack/runtime/hasOwnProperty shorthand","webpack://Dastal/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","self","Symbol","iterator","ArrayList","array","this","index","value","splice","length","callback","pop","push","element","shift","unshift","DoublyLinkedList","prev","next","_get","node","undefined","tail","head","i","LinkedList","remove","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","toStringTag"],"mappings":"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","file":"dastal.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Dastal\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Dastal\"] = factory();\n\telse\n\t\troot[\"Dastal\"] = factory();\n})(self, function() {\nreturn ","import { List } from './list';\n\nexport class ArrayList<T> implements List<T> {\n    protected array: Array<T>;\n\n    constructor(array: Array<T> = []) {\n        this.array = array;\n    }\n\n    /**\n     * Add the element at the specified index\n     *\n     * @param index - The index to add into\n     * @param element - The element to add\n     */\n    add(index: number, value: T): boolean {\n        this.array.splice(index, 0, value);\n        return true;\n    }\n\n    /**\n     * Removes all elements\n     */\n    clear(): void {\n        this.array.length = 0;\n    }\n\n    /**\n     * Return the element at the specified index\n     *\n     * @param index - The index to retrieve\n     */\n    get(index: number): T | undefined {\n        return this.array[index];\n    }\n\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param callback - A function that receives the previous element and returns the new element\n     */\n    getSet(index: number, callback: (element: T) => T): void {\n        if (index >= 0 && index < this.array.length) {\n            this.array[index] = callback(this.array[index]);\n        }\n    }\n\n    /**\n     * Retrieves and removes the end of the list\n     *\n     * @returns The value at the end of the list or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        return this.array.pop();\n    }\n\n    /**\n     * Inserts the specified value into the end of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    push(value: T): boolean {\n        this.array.push(value);\n        return true;\n    }\n\n    /**\n     * Retrieves and removes the element at the given index\n     *\n     * @param index - The index to remove\n     *\n     * @returns The value at the index or `undefined` if the index does not exist\n     */\n    remove(index: number): T | undefined {\n        return this.array.splice(index, 1)[0];\n    }\n\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param element - The new element to insert at index\n     *\n     * @returns The previous element in the index, or undefined if the index does not exist\n     */\n    set(index: number, element: T): T | undefined {\n        if (index < 0 || index >= this.array.length) {\n            return undefined;\n        }\n        const value = this.array[index];\n        this.array[index] = element;\n        return value;\n    }\n\n    /**\n     * Retrieves and removes the first element in the list\n     *\n     * @returns The value at the front of the list or `undefined` if this list is empty.\n     */\n    shift(): T | undefined {\n        return this.array.shift();\n    }\n\n    /**\n     * The number of elements in this list\n     */\n    get size(): number {\n        return this.array.length;\n    }\n\n    /**\n     * Receive an iterator through the list\n     *\n     * @returns An iterator through the list\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this.array[Symbol.iterator]();\n    }\n\n    /**\n     * Inserts the specified value into the front of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    unshift(value: T): boolean {\n        this.array.unshift(value);\n        return true;\n    }\n}\n","import { List } from './list';\n\nexport interface DoublyLinkedNode<T> {\n    next: DoublyLinkedNode<T>;\n    prev: DoublyLinkedNode<T>;\n    value: T;\n}\n\nexport class DoublyLinkedList<T> implements List<T> {\n    protected length: number;\n    protected root: DoublyLinkedNode<T>;\n\n    constructor() {\n        this.length = 0;\n        this.root = {} as DoublyLinkedNode<T>;\n        this.root.prev = this.root.next = this.root;\n    }\n\n    /**\n     * Add the element at the specified index\n     *\n     * @param index - The index to add into\n     * @param element - The element to add\n     */\n    add(index: number, value: T): boolean {\n        if (index < 0 || index > this.length) {\n            return false;\n        }\n        const prev = this._get(index - 1);\n        const node = { next: prev.next, prev, value };\n        prev.next = node.next.prev = node;\n        ++this.length;\n        return true;\n    }\n\n    /**\n     * Removes all elements\n     */\n    clear(): void {\n        this.length = 0;\n        this.root.prev = this.root.next = this.root;\n    }\n\n    /**\n     * Return the element at the specified index\n     *\n     * @param index - The index to retrieve\n     */\n    get(index: number): T | undefined {\n        return index < 0 || index >= this.length ? undefined : this._get(index).value;\n    }\n\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param callback - A function that receives the previous element and returns the new element\n     */\n    getSet(index: number, callback: (element: T) => T): void {\n        if (index >= 0 && index < this.length) {\n            const node = this._get(index);\n            node.value = callback(node.value);\n        }\n    }\n\n    /**\n     * Retrieves and removes the end of the list\n     *\n     * @returns The value at the end of the list or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        if (this.length < 1) {\n            return undefined;\n        }\n        const tail = this.root.prev;\n        tail.prev.next = this.root;\n        this.root.prev = tail.prev;\n        --this.length;\n        return tail.value;\n    }\n\n    /**\n     * Inserts the specified value into the end of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    push(value: T): boolean {\n        const tail = this.root.prev;\n        const node = { next: this.root, prev: tail, value };\n        tail.next = this.root.prev = node;\n        ++this.length;\n        return true;\n    }\n\n    /**\n     * Retrieves and removes the element at the given index\n     *\n     * @param index - The index to remove\n     *\n     * @returns The value at the index or `undefined` if the index does not exist\n     */\n    remove(index: number): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        node.prev.next = node.next;\n        node.next.prev = node.prev;\n        --this.length;\n        return node.value;\n    }\n\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param element - The new element to insert at index\n     *\n     * @returns The previous element in the index, or undefined if the index does not exist\n     */\n    set(index: number, element: T): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        const value = node.value;\n        node.value = element;\n        return value;\n    }\n\n    /**\n     * Retrieves and removes the first element in the list\n     *\n     * @returns The value at the front of the list or `undefined` if this list is empty.\n     */\n    shift(): T | undefined {\n        if (this.length < 1) {\n            return undefined;\n        }\n        const head = this.root.next;\n        head.next.prev = this.root;\n        this.root.next = head.next;\n        --this.length;\n        return head.value;\n    }\n\n    /**\n     * The number of elements in this list\n     */\n    get size(): number {\n        return this.length;\n    }\n\n    /**\n     * Receive an iterator through the list\n     *\n     * @returns An iterator through the list\n     */\n    *[Symbol.iterator](): Iterator<T> {\n        let node = this.root;\n        for (let i = 0; i < this.length; ++i) {\n            node = node!.next;\n            yield node.value;\n        }\n    }\n\n    /**\n     * Inserts the specified value into the front of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    unshift(value: T): boolean {\n        const head = this.root.next;\n        const node = { next: head, prev: this.root, value };\n        this.root.next = head.prev = node;\n        ++this.length;\n        return true;\n    }\n\n    protected _get(index: number): DoublyLinkedNode<T> {\n        let node = this.root;\n\n        if (index < this.length / 2) {\n            while (index-- >= 0) {\n                node = node.next;\n            }\n        } else {\n            index = this.length - index;\n            while (index-- > 0) {\n                node = node.prev;\n            }\n        }\n\n        return node;\n    }\n}\n","import { List } from './list';\n\nexport interface LinkedNode<T> {\n    next: LinkedNode<T>;\n    value: T;\n}\n\nexport class LinkedList<T> implements List<T> {\n    protected length: number;\n    protected tail?: LinkedNode<T>;\n\n    constructor() {\n        this.length = 0;\n    }\n\n    /**\n     * Add the element at the specified index\n     *\n     * @param index - The index to add into\n     * @param element - The element to add\n     */\n    add(index: number, value: T): boolean {\n        if (index < 0 || index >= this.length) {\n            return index == this.length ? this.push(value) : false;\n        }\n        const prev = this._get(index - 1);\n        prev.next = { value, next: prev.next };\n        ++this.length;\n        return true;\n    }\n\n    /**\n     * Removes all elements\n     */\n    clear(): void {\n        this.length = 0;\n        this.tail = undefined;\n    }\n\n    /**\n     * Return the element at the specified index\n     *\n     * @param index - The index to retrieve\n     */\n    get(index: number): T | undefined {\n        return index < 0 || index >= this.length ? undefined : this._get(index).value;\n    }\n\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param callback - A function that receives the previous element and returns the new element\n     */\n    getSet(index: number, callback: (element: T) => T): void {\n        if (index >= 0 && index < this.length) {\n            const node = this._get(index);\n            node.value = callback(node.value);\n        }\n    }\n\n    /**\n     * Retrieves and removes the end of the list\n     *\n     * @returns The value at the end of the list or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        return this.remove(this.length - 1);\n    }\n\n    /**\n     * Inserts the specified value into the end of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    push(value: T): boolean {\n        this.unshift(value);\n        this.tail = this.tail!.next;\n        return true;\n    }\n\n    /**\n     * Retrieves and removes the element at the given index\n     *\n     * @param index - The index to remove\n     *\n     * @returns The value at the index or `undefined` if the index does not exist\n     */\n    remove(index: number): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n\n        const prev = this._get(index - 1);\n        prev.next = prev.next.next;\n        if (--this.length < 1) {\n            this.tail = undefined;\n        }\n\n        return prev.value;\n    }\n\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param element - The new element to insert at index\n     *\n     * @returns The previous element in the index, or undefined if the index does not exist\n     */\n    set(index: number, element: T): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        const value = node.value;\n        node.value = element;\n        return value;\n    }\n\n    /**\n     * Retrieves and removes the first element in the list\n     *\n     * @returns The value at the front of the list or `undefined` if this list is empty.\n     */\n    shift(): T | undefined {\n        if (this.tail == null) {\n            return undefined;\n        }\n\n        const head = this.tail.next;\n        this.tail.next = head.next;\n        if (--this.length < 1) {\n            this.tail = undefined;\n        }\n\n        return head.value;\n    }\n\n    /**\n     * The number of elements in this list\n     */\n    get size(): number {\n        return this.length;\n    }\n\n    /**\n     * Receive an iterator through the list\n     *\n     * @returns An iterator through the list\n     */\n    *[Symbol.iterator](): Iterator<T> {\n        let node = this.tail;\n        for (let i = 0; i < this.length; ++i) {\n            node = node!.next;\n            yield node.value;\n        }\n    }\n\n    /**\n     * Inserts the specified value into the front of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    unshift(value: T): boolean {\n        const head: LinkedNode<T> = { value } as LinkedNode<T>;\n\n        if (this.tail == null) {\n            head.next = head;\n            this.tail = head;\n        } else {\n            head.next = this.tail.next;\n            this.tail.next = head;\n        }\n\n        ++this.length;\n        return true;\n    }\n\n    protected _get(index: number): LinkedNode<T> {\n        let node = this.tail!;\n        while (index-- >= 0) {\n            node = node.next;\n        }\n        return node;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}