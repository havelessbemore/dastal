{"version":3,"sources":["webpack://Dastal/webpack/universalModuleDefinition","webpack://Dastal/./src/list/arrayList.ts","webpack://Dastal/./src/list/doublyLinkedList.ts","webpack://Dastal/./src/list/linkedList.ts","webpack://Dastal/./src/queue/arrayQueue.ts","webpack://Dastal/./src/queue/linkedQueue.ts","webpack://Dastal/./src/stack/arrayStack.ts","webpack://Dastal/./src/stack/linkedStack.ts","webpack://Dastal/webpack/bootstrap","webpack://Dastal/webpack/runtime/compat get default export","webpack://Dastal/webpack/runtime/define property getters","webpack://Dastal/webpack/runtime/hasOwnProperty shorthand","webpack://Dastal/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","self","Symbol","iterator","ArrayList","elements","this","array","Array","from","index","element","length","splice","size","out","lists","list","push","min","max","fill","callback","value","pop","reverse","prev","shift","unshift","DoublyLinkedList","next","_get","node","Math","undefined","tail","n","temp","head","i","LinkedList","remove","ArrayQueue","LinkedQueue","clear","get","ArrayStack","LinkedStack","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","r","toStringTag"],"mappings":"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","file":"dastal.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Dastal\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Dastal\"] = factory();\n\telse\n\t\troot[\"Dastal\"] = factory();\n})(self, function() {\nreturn ","import { List } from './list';\n\n/**\n * An implementation of the {@link List} interface using an array\n */\nexport class ArrayList<T> implements List<T> {\n    /**\n     * @ignore\n     */\n    protected array: Array<T>;\n\n    constructor(elements?: Iterable<T>) {\n        this.array = elements ? Array.from(elements) : [];\n    }\n    /**\n     * Add the element at the specified index\n     *\n     * @param index - The index to add into\n     * @param element - The element to add\n     *\n     * @returns The new size of the list\n     */\n    add(index: number, element: T): number {\n        if (index >= 0 && index <= this.array.length) {\n            this.array.splice(index, 0, element);\n        }\n        return this.size;\n    }\n    /**\n     * Removes all elements\n     */\n    clear(): void {\n        this.array.length = 0;\n    }\n    /**\n     * Combines the list with multiple iterables into a new list.\n     * Does not modify the existing list or inputs.\n     *\n     * @param lists — Additional iterables to add to the end of the list.\n     *\n     * @returns A new list consisting of the elements in the list on which\n     * it is called, followed in order by the elements of each argument. It\n     * does not recurse into nested iterable arguments\n     */\n    concat(...lists: Iterable<T>[]): ArrayList<T> {\n        const out = new ArrayList(this);\n        for (const list of lists) {\n            for (const element of list) {\n                out.push(element);\n            }\n        }\n        return out;\n    }\n    /**\n     * Returns the this object after filling the section identified by min and max with element\n     *\n     * @param element — element to fill list section with\n     * @param min - index to start filling the list at. If start is negative,\n     * it is treated as length+start where length is the length of the list.\n     * @param end - index to stop filling the list at. If end is negative,\n     * it is treated as length+end where length is the length of the list.\n     *\n     * @returns The list on which this method was called\n     */\n    fill(element: T, min?: number, max?: number): this {\n        this.array.fill(element, min, max);\n        return this;\n    }\n    /**\n     * Return the element at the specified index\n     *\n     * @param index - The index to retrieve\n     *\n     * @returns The element at the index, or `undefined` if index is invalid\n     */\n    get(index: number): T | undefined {\n        if (index < 0 || index >= this.array.length) {\n            return undefined;\n        }\n        return this.array[index];\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param callback - A function that receives the previous element and returns the new element.\n     * Note: The function is only called if the index is valid\n     *\n     * @returns The previous element at the index, or `undefined` if index is invalid\n     */\n    getSet(index: number, callback: (element: T) => T): T | undefined {\n        if (index < 0 || index >= this.array.length) {\n            return undefined;\n        }\n        const value = this.array[index];\n        this.array[index] = callback(value);\n        return value;\n    }\n    /**\n     * Retrieves and removes the end of the list\n     *\n     * @returns The element at the end of the list, or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        return this.array.pop();\n    }\n    /**\n     * Inserts the specified element into the end of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns The new size of the list\n     */\n    push(element: T): number {\n        return this.array.push(element);\n    }\n    /**\n     * Retrieves and removes the element at the given index\n     *\n     * @param index - The index to remove\n     *\n     * @returns The element at the index or `undefined` if the index is invalid\n     */\n    remove(index: number): T | undefined {\n        if (index < 0 || index >= this.array.length) {\n            return undefined;\n        }\n        return this.array.splice(index, 1)[0];\n    }\n    /**\n     * Reverses the elements in the list in place.\n     *\n     * @returns a reference to the same list\n     */\n    reverse(): this {\n        this.array.reverse();\n        return this;\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param element - The new element to insert at index\n     *\n     * @returns The previous element in the index, or undefined if the index is invalid\n     */\n    set(index: number, element: T): T | undefined {\n        if (index < 0 || index >= this.array.length) {\n            return undefined;\n        }\n        const prev = this.array[index];\n        this.array[index] = element;\n        return prev;\n    }\n    /**\n     * Retrieves and removes the first element in the list\n     *\n     * @returns The element at the front of the list or `undefined` if this list is empty.\n     */\n    shift(): T | undefined {\n        return this.array.shift();\n    }\n    /**\n     * The number of elements in this list\n     */\n    get size(): number {\n        return this.array.length;\n    }\n    /**\n     * Receive an iterator through the list.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the list\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this.array[Symbol.iterator]();\n    }\n    /**\n     * Inserts the specified element into the front of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns The new size of the list\n     */\n    unshift(element: T): number {\n        return this.array.unshift(element);\n    }\n}\n","import { List } from './list';\n\n/**\n * A doubly-linked node version of the {@link LinkedNode} interface.\n *\n * Each node links to its neighbors on the left (prev) and right (next) of it.\n */\nexport interface DoublyLinkedNode<T> {\n    /**\n     * A link to the node's next (right) neighbor\n     */\n    next?: DoublyLinkedNode<T>;\n    /**\n     * A link to the node's previous (left) neighbor\n     */\n    prev?: DoublyLinkedNode<T>;\n    /**\n     * The value of the node\n     */\n    value: T;\n}\n/**\n * A (circular) doubly-linked list implementation of the {@link List} interface.\n *\n * Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index.\n */\nexport class DoublyLinkedList<T> implements List<T> {\n    /**\n     * @ignore\n     * The number of elements in this list\n     */\n    protected length: number;\n    /**\n     * @ignore\n     * The first node in the list\n     */\n    protected root: DoublyLinkedNode<T>;\n\n    constructor(elements?: Iterable<T>) {\n        this.length = 0;\n        this.root = {} as DoublyLinkedNode<T>;\n        this.root.prev = this.root.next = this.root;\n        for (const element of elements || []) {\n            this.push(element);\n        }\n    }\n    /**\n     * Add the element at the specified index\n     *\n     * @param index - The index to add into\n     * @param value - The element to add\n     */\n    add(index: number, value: T): number {\n        if (index < 0 || index > this.length) {\n            return this.length;\n        }\n        const prev = this._get(index - 1);\n        const node = { next: prev.next, prev, value };\n        prev.next = node.next!.prev = node;\n        return ++this.length;\n    }\n    /**\n     * Removes all elements\n     */\n    clear(): void {\n        this.length = 0;\n        this.root.prev = this.root.next = this.root;\n    }\n    /**\n     * Combines the list with multiple iterables into a new list.\n     * Does not modify the existing list or inputs.\n     *\n     * @param lists — Additional iterables to add to the end of the list.\n     *\n     * @returns A new list consisting of the elements in the list on which\n     * it is called, followed in order by the elements of each argument. It\n     * does not recurse into nested iterable arguments\n     */\n    concat(...lists: Iterable<T>[]): DoublyLinkedList<T> {\n        const out = new DoublyLinkedList(this);\n        for (const list of lists) {\n            for (const element of list) {\n                out.push(element);\n            }\n        }\n        return out;\n    }\n    /**\n     * Returns the this object after filling the section identified by min and max with element\n     *\n     * @param element — element to fill list section with\n     * @param min - index to start filling the list at. If start is negative,\n     * it is treated as length+start where length is the length of the list.\n     * @param end - index to stop filling the list at. If end is negative,\n     * it is treated as length+end where length is the length of the list.\n     *\n     * @returns The list on which this method was called\n     */\n    fill(element: T, min?: number, max?: number): this {\n        min = min == null ? 0 : min < 0 ? this.length + min : min;\n        max = max == null ? this.length : max < 0 ? this.length + max : max;\n        min = Math.min(this.length, Math.max(0, min));\n        max = Math.min(this.length, Math.max(0, max));\n        if (min < max) {\n            let node = this._get(min);\n            do {\n                node.value = element;\n                node = node.next!;\n            } while (++min < max);\n        }\n        return this;\n    }\n    /**\n     * Return the element at the specified index\n     *\n     * @param index - The index to retrieve\n     *\n     * @returns The element at the index, or `undefined` if index is invalid\n     */\n    get(index: number): T | undefined {\n        return index < 0 || index >= this.length ? undefined : this._get(index).value;\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param callback - A function that receives the previous element and returns the new element\n     * Note: The function is only called if the index is valid\n     *\n     * @returns The previous element at the index, or `undefined` if index is invalid\n     */\n    getSet(index: number, callback: (element: T) => T): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        const value = node.value;\n        node.value = callback(node.value);\n        return value;\n    }\n    /**\n     * Retrieves and removes the end of the list\n     *\n     * @returns The element at the end of the list, or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        if (this.length < 1) {\n            return undefined;\n        }\n        const tail = this.root.prev!;\n        tail.prev!.next = this.root;\n        this.root.prev = tail.prev;\n        --this.length;\n        return tail.value;\n    }\n    /**\n     * Inserts the specified element into the end of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    push(value: T): number {\n        const tail = this.root.prev!;\n        const node = { next: this.root, prev: tail, value };\n        tail.next = this.root.prev = node;\n        return ++this.length;\n    }\n    /**\n     * Retrieves and removes the element at the given index\n     *\n     * @param index - The index to remove\n     *\n     * @returns The element at the index or `undefined` if the index is invalid\n     */\n    remove(index: number): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        node.prev!.next = node.next;\n        node.next!.prev = node.prev;\n        --this.length;\n        return node.value;\n    }\n    /**\n     * Reverses the elements in the list in place.\n     *\n     * @returns a reference to the same list\n     */\n    reverse(): this {\n        let node = this.root;\n        for (let n = this.length; n >= 0; --n) {\n            const temp = node.next!;\n            node.next = node.prev;\n            node.prev = temp;\n            node = temp;\n        }\n        return this;\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param element - The new element to insert at index\n     *\n     * @returns The previous element in the index, or undefined if the index is invalid\n     */\n    set(index: number, element: T): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        const prev = node.value;\n        node.value = element;\n        return prev;\n    }\n    /**\n     * Retrieves and removes the first element in the list\n     *\n     * @returns The element at the front of the list or `undefined` if this list is empty.\n     */\n    shift(): T | undefined {\n        if (this.length < 1) {\n            return undefined;\n        }\n        const head = this.root.next!;\n        head.next!.prev = this.root;\n        this.root.next = head.next;\n        --this.length;\n        return head.value;\n    }\n    /**\n     * The number of elements in this list\n     */\n    get size(): number {\n        return this.length;\n    }\n    /**\n     * Receive an iterator through the list.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the list\n     */\n    *[Symbol.iterator](): Iterator<T> {\n        let node = this.root;\n        for (let i = 0; i < this.length; ++i) {\n            node = node.next!;\n            yield node.value;\n        }\n    }\n    /**\n     * Inserts the specified element into the front of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    unshift(value: T): number {\n        const head = this.root.next!;\n        const node = { next: head, prev: this.root, value };\n        this.root.next = head.prev = node;\n        return ++this.length;\n    }\n    /**\n     * @ignore\n     * A helper method to iterate and return the node at the given index.\n     *\n     * Depending on the index, the list will be traversed from beginning or end; whichever is closest to the specified index.\n     *\n     * @param index - The index to retrieve\n     *\n     * @returns The node at the given index\n     */\n    protected _get(index: number): DoublyLinkedNode<T> {\n        let node = this.root;\n\n        if (index < this.length / 2) {\n            while (index-- >= 0) {\n                node = node.next!;\n            }\n        } else {\n            for (index = this.length - index; index > 0; --index) {\n                node = node.prev!;\n            }\n        }\n\n        return node;\n    }\n}\n","import { List } from './list';\n\n/**\n * A linked node interface.\n *\n * Each node links to its next neighbor.\n */\nexport interface LinkedNode<T> {\n    /**\n     * A link to the node's neighbor\n     */\n    next?: LinkedNode<T>;\n    /**\n     * The value of the node\n     */\n    value: T;\n}\n/**\n * A (circular) linked list implementation of the {@link List} interface.\n */\nexport class LinkedList<T> implements List<T> {\n    /**\n     * @ignore\n     */\n    protected length: number;\n    /**\n     * @ignore\n     */\n    protected tail?: LinkedNode<T>;\n\n    constructor(elements?: Iterable<T>) {\n        this.length = 0;\n        for (const element of elements || []) {\n            this.push(element);\n        }\n    }\n    /**\n     * Add the element at the specified index\n     *\n     * @param index - The index to add into\n     * @param element - The element to add\n     */\n    add(index: number, value: T): number {\n        if (index < 0 || index >= this.length) {\n            return index == this.length ? this.push(value) : this.length;\n        }\n        const prev = this._get(index - 1);\n        prev.next = { value, next: prev.next };\n        return ++this.length;\n    }\n    /**\n     * Removes all elements\n     */\n    clear(): void {\n        this.length = 0;\n        this.tail = undefined;\n    }\n    /**\n     * Combines the list with multiple iterables into a new list.\n     * Does not modify the existing list or inputs.\n     *\n     * @param lists — Additional iterables to add to the end of the list.\n     *\n     * @returns A new list consisting of the elements in the list on which\n     * it is called, followed in order by the elements of each argument. It\n     * does not recurse into nested iterable arguments\n     */\n    concat(...lists: Iterable<T>[]): LinkedList<T> {\n        const out = new LinkedList(this);\n        for (const list of lists) {\n            for (const element of list) {\n                out.push(element);\n            }\n        }\n        return out;\n    }\n    /**\n     * Returns the this object after filling the section identified by min and max with element\n     *\n     * @param element — element to fill list section with\n     * @param min - index to start filling the list at. If start is negative,\n     * it is treated as length+start where length is the length of the list.\n     * @param end - index to stop filling the list at. If end is negative,\n     * it is treated as length+end where length is the length of the list.\n     *\n     * @returns The list on which this method was called\n     */\n    fill(element: T, min?: number, max?: number): this {\n        min = min == null ? 0 : min < 0 ? this.length + min : min;\n        max = max == null ? this.length : max < 0 ? this.length + max : max;\n        min = Math.min(this.length, Math.max(0, min));\n        max = Math.min(this.length, Math.max(0, max));\n        if (min < max) {\n            let node = this._get(min);\n            do {\n                node.value = element;\n                node = node.next!;\n            } while (++min < max);\n        }\n        return this;\n    }\n    /**\n     * Return the element at the specified index\n     *\n     * @param index - The index to retrieve\n     *\n     * @returns The element at the index, or `undefined` if index is invalid\n     */\n    get(index: number): T | undefined {\n        return index < 0 || index >= this.length ? undefined : this._get(index).value;\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param callback - A function that receives the previous element and returns the new element.\n     * Note: The function is only called if the index is valid\n     *\n     * @returns The previous element at the index, or `undefined` if index is invalid\n     */\n    getSet(index: number, callback: (element: T) => T): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        const value = node.value;\n        node.value = callback(node.value);\n        return value;\n    }\n    /**\n     * Retrieves and removes the end of the list\n     *\n     * @returns The value at the end of the list, or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        return this.remove(this.length - 1);\n    }\n    /**\n     * Inserts the specified value into the end of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    push(value: T): number {\n        this.unshift(value);\n        this.tail = this.tail!.next;\n        return this.length;\n    }\n    /**\n     * Retrieves and removes the element at the given index\n     *\n     * @param index - The index to remove\n     *\n     * @returns The value at the index or `undefined` if the index is invalid\n     */\n    remove(index: number): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const prev = this._get(index - 1);\n        const node = prev.next!;\n        prev.next = node.next;\n        if (--this.length < 1) {\n            this.tail = undefined;\n        }\n        return node.value;\n    }\n    /**\n     * Reverses the elements in the list in place.\n     *\n     * @returns a reference to the same list\n     */\n    reverse(): this {\n        if (this.length > 1) {\n            let prev = this.tail!;\n            let node = prev.next!;\n            this.tail = node;\n            for (let n = this.length; n > 0; --n) {\n                const next = node.next!;\n                node.next = prev;\n                prev = node;\n                node = next;\n            }\n        }\n        return this;\n    }\n    /**\n     * Update the element at the specified index\n     *\n     * @param index - The index to retrieve\n     * @param element - The new element to insert at index\n     *\n     * @returns The previous element in the index, or undefined if the index is invalid\n     */\n    set(index: number, element: T): T | undefined {\n        if (index < 0 || index >= this.length) {\n            return undefined;\n        }\n        const node = this._get(index);\n        const value = node.value;\n        node.value = element;\n        return value;\n    }\n    /**\n     * Retrieves and removes the first element in the list\n     *\n     * @returns The value at the front of the list or `undefined` if this list is empty.\n     */\n    shift(): T | undefined {\n        if (this.tail == null) {\n            return undefined;\n        }\n        const head = this.tail.next!;\n        this.tail.next = head.next;\n        if (--this.length < 1) {\n            this.tail = undefined;\n        }\n        return head.value;\n    }\n    /**\n     * The number of elements in this list\n     */\n    get size(): number {\n        return this.length;\n    }\n    /**\n     * Receive an iterator through the list.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the list\n     */\n    *[Symbol.iterator](): Iterator<T> {\n        let node = this.tail;\n        for (let i = 0; i < this.length; ++i) {\n            node = node!.next!;\n            yield node.value;\n        }\n    }\n    /**\n     * Inserts the specified value into the front of the list\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns `true` upon success, otherwise `false`\n     */\n    unshift(value: T): number {\n        const head: LinkedNode<T> = { value } as LinkedNode<T>;\n        if (this.tail == null) {\n            head.next = head;\n            this.tail = head;\n        } else {\n            head.next = this.tail.next;\n            this.tail.next = head;\n        }\n        return ++this.length;\n    }\n    /**\n     * @ignore\n     * A helper method to iterate and return the node at the given index.\n     *\n     * @param index - The index to retrieve\n     *\n     * @returns The node at the given index\n     */\n    protected _get(index: number): LinkedNode<T> {\n        let node = this.tail!;\n        while (index-- >= 0) {\n            node = node.next!;\n        }\n        return node;\n    }\n}\n","import { Queue } from './queue';\n\n/**\n * An implementation of the {@link Queue} interface using an array\n */\nexport class ArrayQueue<T> implements Queue<T> {\n    /**\n     * @ignore\n     */\n    protected array: T[];\n\n    constructor(elements?: Iterable<T>) {\n        this.array = elements ? Array.from(elements) : [];\n    }\n    /**\n     * Removes all elements from this queue\n     */\n    clear(): void {\n        this.array.length = 0;\n    }\n    /**\n     * Retrieves and removes the head of this queue\n     *\n     * @returns The element at the head of the queue or `undefined` if this queue is empty.\n     */\n    dequeue(): T | undefined {\n        return this.size < 1 ? undefined : this.array.shift();\n    }\n    /**\n     * Inserts the specified element into this queue\n     *\n     * @param element - The element to be inserted\n     */\n    enqueue(element: T): number {\n        return this.array.push(element);\n    }\n    /**\n     * Retrieves, but does not remove, the head of this queue\n     *\n     * @returns The value at the head of the queue or `undefined` if this queue is empty.\n     */\n    peek(): T | undefined {\n        return this.size < 1 ? undefined : this.array[0];\n    }\n    /**\n     * The number of elements in this queue\n     */\n    get size(): number {\n        return this.array.length;\n    }\n    /**\n     * Receive an iterator through the queue.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the queue\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this.array[Symbol.iterator]();\n    }\n}\n","import { LinkedList, List } from '../list';\nimport { Queue } from './queue';\n\n/**\n * A linked list implementation of the {@link Queue} interface\n */\nexport class LinkedQueue<T> implements Queue<T> {\n    /**\n     * @ignore\n     */\n    protected list: List<T>;\n\n    constructor(elements?: Iterable<T>) {\n        this.list = new LinkedList(elements);\n    }\n    /**\n     * Removes all elements from this queue\n     */\n    clear(): void {\n        this.list.clear();\n    }\n    /**\n     * Retrieves and removes the head of this queue\n     *\n     * @returns The element at the head of the queue or `undefined` if this queue is empty.\n     */\n    dequeue(): T | undefined {\n        return this.list.shift();\n    }\n    /**\n     * Inserts the specified element into this queue\n     *\n     * @param element - The element to be inserted\n     */\n    enqueue(element: T): number {\n        return this.list.push(element);\n    }\n    /**\n     * Retrieves, but does not remove, the head of this queue\n     *\n     * @returns The element at the head of the queue or `undefined` if this queue is empty.\n     */\n    peek(): T | undefined {\n        return this.list.get(0);\n    }\n    /**\n     * The number of elements in this queue\n     */\n    get size(): number {\n        return this.list.size;\n    }\n    /**\n     * Receive an iterator through the queue.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the queue\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this.list[Symbol.iterator]();\n    }\n}\n","import { Stack } from './stack';\n\n/**\n * An implementation of the {@link Stack} interface using an array\n */\nexport class ArrayStack<T> implements Stack<T> {\n    /**\n     * @ignore\n     */\n    protected array: T[];\n\n    constructor(elements?: Iterable<T>) {\n        this.array = elements ? Array.from(elements) : [];\n    }\n    /**\n     * Removes all elements from the stack\n     */\n    clear(): void {\n        this.array.length = 0;\n    }\n    /**\n     * Retrieves, but does not remove, the top of the stack\n     *\n     * @returns The element at the top of the stack or `undefined` if empty.\n     */\n    peek(): T | undefined {\n        return this.array[this.array.length - 1];\n    }\n    /**\n     * Retrieves and removes the top of the stack\n     *\n     * @returns The element at the top of the stack or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        return this.array.pop();\n    }\n    /**\n     * Inserts a element into the stack\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns The new size of the stack\n     */\n    push(element: T): number {\n        return this.array.push(element);\n    }\n    /**\n     * The number of elements in the stack\n     */\n    get size(): number {\n        return this.array.length;\n    }\n    /**\n     * Receive an iterator through the stack.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the stack\n     */\n    *[Symbol.iterator](): Iterator<T> {\n        const array = this.array;\n        for (let i = array.length; i > 0; yield array[--i]) {}\n    }\n}\n","import { LinkedList, List } from '../list';\nimport { Stack } from './stack';\n\n/**\n * A linked list implementation of the {@link Stack} interface\n */\nexport class LinkedStack<T> implements Stack<T> {\n    /**\n     * @ignore\n     */\n    protected list: List<T>;\n\n    constructor(elements?: Iterable<T>) {\n        this.list = new LinkedList();\n        for (const element of elements || []) {\n            this.push(element);\n        }\n    }\n    /**\n     * Removes all elements from the stack\n     */\n    clear(): void {\n        this.list.clear();\n    }\n    /**\n     * Retrieves, but does not remove, the top of the stack\n     *\n     * @returns The element at the top of the stack or `undefined` if empty.\n     */\n    peek(): T | undefined {\n        return this.list.get(0);\n    }\n    /**\n     * Retrieves and removes the top of the stack\n     *\n     * @returns The element at the top of the stack or `undefined` if empty.\n     */\n    pop(): T | undefined {\n        return this.list.shift();\n    }\n    /**\n     * Inserts a element into the stack\n     *\n     * @param element - The element to be inserted\n     *\n     * @returns The new size of the stack\n     */\n    push(element: T): number {\n        return this.list.unshift(element);\n    }\n    /**\n     * The number of elements in the stack\n     */\n    get size(): number {\n        return this.list.size;\n    }\n    /**\n     * Receive an iterator through the stack.\n     *\n     * **Note:** Unexpected behavior can occur if the collection is modified during iteration.\n     *\n     * @returns An iterator through the stack\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this.list[Symbol.iterator]();\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}